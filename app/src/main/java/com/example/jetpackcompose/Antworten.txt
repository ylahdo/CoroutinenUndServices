
A) 1. Kombination von parallelen Aufgaben
   2. Optimierung von Thread-Operationen
   3. Bessere Lesbarkeit
   4. Einfachere Fehlerbehebung
   Insgesamt tragen Coroutinen dazu bei, dass asynchrone Aufgaben in Android-Anwendungen effizienter,
   klarer und benutzerfreundlicher umgesetzt werden können.


B) Für netzwerkintensive Aufgaben wie API-Aufrufe wird Dispatchers.IO bevorzugt,
   da er Threads effizient für I/O-Operationen nutzt.


C) • Navigations-App:
     Eine Karten-App nutzt einen Foreground Service, um den Standort des Benutzers zu
     verfolgen und eine Navigation anzubieten.

   • Daten-Synchronisierung:
     Eine App synchronisiert regelmäßig Benutzerdaten (z. B. Kalender, Kontakte oder
     Dateien) mit einem Server.


D) • Effizienz:
     Optimale Nutzung von Dispatchers für spezifische Aufgaben.

   • Bessere Fehlerbehandlung:
     Strukturierte Concurrency mit CoroutineScope bietet Kontrollfluss und Transparenz.

   • Ressourcenoptimierung:
      o Hintergrundarbeit wird nur bei Bedarf ausgeführt.
      o Koroutinen können pausieren und später fortgesetzt werden (z. B. mit suspend).

   In der Wetter-App wird der Service PopupService verwendet, um Benachrichtigungen zu senden, basierend auf einem Timer.
   Coroutinen werden hier verwendet, um die Timer-Einstellungen im Hintergrund zu holen
   und asynchron das Abrufen von Einstellungen aus dem DataStore durchzuführen.